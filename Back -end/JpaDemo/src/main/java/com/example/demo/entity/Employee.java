package com.example.demo.entity;

import java.util.List;

import com.example.demo.dto.EmployeeDto;
import com.fasterxml.jackson.annotation.JsonIgnore;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.JoinTable;
import jakarta.persistence.ManyToMany;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.OneToOne;
import jakarta.persistence.Table;

/**
 *  CREATE TABLE employee (
  id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  firstname VARCHAR(50) NOT NULL,
  lastname VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  department_id BIGINT NOT NULL,
  CONSTRAINT fk_employee_department FOREIGN KEY (department_id) REFERENCES department(id)
);

 */
/**
create table employee_skill(
employee_id bigint not null,
skill_id bigint not null ,
constraint fK_employee_skill_employee_id foreign key(employee_id) references employee(id),
constraint fk_employee_skill_skill_id foreign key(skill_id)references skill(id));
*/
@Entity
@Table(name="employee")
public class Employee {
	@Id
	@GeneratedValue(strategy =GenerationType.IDENTITY)
	@Column(name="id")
	private long id;
	@Column(name="firstname" ,nullable=false)
	private String firstName;
	@Column(name="lastname",nullable=false)
	private String lastName;
	@Column(name="email",nullable=false)
	private String email;
	@OneToOne(mappedBy = "employee",cascade = {CascadeType.ALL})
	private Account account;
	@ManyToOne(cascade ={CascadeType.DETACH,CascadeType.MERGE,CascadeType.PERSIST,
			CascadeType.REFRESH})
	@JoinColumn(name="department_id")
	private Department department;
	@ManyToMany(cascade = {CascadeType.DETACH,CascadeType.MERGE,CascadeType.PERSIST,
			CascadeType.REFRESH})
	@JoinTable(name="employee_skill",
	joinColumns=@JoinColumn(name="employee_id"),
	inverseJoinColumns=@JoinColumn(name="skill_id")
	)
	private List<Skill>skills;
	
	public Employee() {}
	
	public Employee(long id, String firstName, String lastName, String email, Account account, Department department,
			List<Skill> skills) {

		this.id = id;
		this.firstName = firstName;
		this.lastName = lastName;
		this.email = email;
		this.account = account;
		this.department = department;
		this.skills = skills;
	}

	public long getId() {
		return id;
	}

	public void setId(long id) {
		this.id = id;
	}

	public String getFirstName() {
		return firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	public String getLastName() {
		return lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}
	@JsonIgnore
	public Account getAccount() {
		return account;
	}

	public void setAccount(Account account) {
		this.account = account;
	}
	@JsonIgnore
	public Department getDepartment() {
		return department;
	}

	public void setDepartment(Department department) {
		this.department = department;
	}
	@JsonIgnore
	public List<Skill> getSkills() {
		return skills;
	}

	public void setSkills(List<Skill> skills) {
		this.skills = skills;
	}

	
	
	
	
	

}
